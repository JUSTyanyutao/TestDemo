<?php
abstract class displayer{

    protected function __construct(){}
	protected function path_as_array($path)
	{
		if ( $path )
		{
			$path_array = explode('/',$path);
			foreach ( $path_array as $value )
			{
				if ( $value )
				{
					$array[] = $value;
				}
			}
			return $array;
		}
	}

	/**
	 * 生成hash值
	 *
	 * @param bool $more
	 * @param integer $len
	 * @return
	 */
	protected function uuid( $more = true , $len = 5 )
	{
		if ( $more )
		{
			return uniqid( md5(mt_rand() ), true );
		}
		else
		{
			return uniqid( self::create_guid_section( $len ) , false );
		}
	}

	protected function create_guid_section( $characters )
	{
		$return  = '';
		for ( $i = 0; $i < $characters; $i++ )
		{
			$return .= dechex( mt_rand( 0, 15 ) );
		}
		return $return;
	}
    /*
	protected function mm_init($type)
	{
		global $config;
		if ( $type )
		{
			$memcache = new Memcache;
			foreach ( $config['mm'][$type] as $server )
			{
				$memcache->addServer($server['host'],$server['port']);
			}
			return $memcache;
		}
	}

	*/

	protected function getFilePath($dir, $key, $url = FALSE, $fileext = '.jpg' )
	{

		$firstFolder = substr($key,0,1);
		$secondFolder = substr($key,1,2);
		$lastFolder = substr($key,3,2);
		$path = $dir . $firstFolder . '/' . $secondFolder . '/' . $lastFolder. '/' . $key . $fileext;

		if ( $url )
        {
            return IMG_DOMAIN. 'product/' . $firstFolder . '/' . $secondFolder . '/' . $lastFolder. '/' . $key . $fileext;
        }

		if ( file_exists($path) )
		{
			return $dir . $firstFolder . '/' . $secondFolder . '/' . $lastFolder. '/' ;
		}
		else
		{
			return false;
		}
	}

    /**
     * 获取图片所在文件夹
     *
     * @return
     */
    protected function getHashFolder()
    {
        $this->firstFolder = substr($this->hashKey,0,1);
        $this->secondFolder = substr($this->hashKey,1,2);
        $this->lastFolder = substr($this->hashKey,3,2);

        return $this->firstFolder.'/'.$this->secondFolder.'/'.$this->lastFolder.'/';
    }

    /**
     * 创建用户一系列文件夹
     *
     * @return
     */
    protected function makeUserAvatarFolder()
    {
        /*创建用户图片文件夹*/
        mkdir($this->imgPath,0755,true);

        return $this->imgPath;
    }

	protected function adjust_img($pic_path, $sizes, $new_path, $is_show = TRUE, $type = 2)
	{
		if (!class_exists('MyImageCrop')) include('MyImageLib.php');
		$size = explode('x',$sizes);
		$img = new MyImageCrop($pic_path,$new_path);
		$imginfo = $img->Crop($size[0], $size[1], $type);
		if ( $is_show )
		{
			$this->cache_send($new_path,filemtime($new_path));
		}
		else
		{
			$imginfo['new_path'] = $new_path;
			return $imginfo;
		}
	}

	/*
	 * @name 图片上传处理
	 * @param filename String file名
	 * @param watermark Bool 水印
	 * @retrun Mixed
	 */
	protected function upload_img( $filename = 'upload', $watermark = FALSE)
	{
		$ret = $this->_do_upload($filename);
		if ( isset($ret['key']) )
		{
			//加水印
			if ( $watermark )
			{
				if (!class_exists('Image_lib')) include('Image_lib.php');
			}
		}

		return $ret;
	}

	protected function _do_upload($filename)
	{
		if (!class_exists('uploadFile')) include('upload.php');

        if ( is_dir($this->imgPath) )
		{
            $userUploadFolderPath = $this->imgPath;
        }
        else
        {
            $userUploadFolderPath = $this->makeUserAvatarFolder();
        }

        $config['upload_path'] = $userUploadFolderPath;
        $config['allowed_types'] = 'gif|jpg|png|jpeg';
        $config['file_name'] = $this->hashKey;
        $uploadClass = new uploadFile($config);
        if ( ! $uploadClass->do_upload($filename) )
        {
			return array('code'=>9003,'cid'=>$filename,'message'=>$uploadClass->display_errors());
        }
        else
        {
            $data   = array('upload_data' => $uploadClass->data());
            if( empty($data['upload_data']) )
            {
                return array('code'=>9003,'cid'=>$filename,'message'=>'上传出现异常');
            }

			if ( $this->thumbnail )
			{
				$imginfo = $this->adjust_img($data['upload_data']['full_path'],$this->thumbnail,$data['upload_data']['full_path'],FALSE);
			}

			if ( $this->create )
			{
				$file_path = $data['upload_data']['file_path'];
				$file_c_name = $this->hashKey.'_c.jpg';
				$file_z_name = $this->hashKey.'_z.jpg';

				$this->adjust_img($data['upload_data']['full_path'],$this->create,$file_path.$file_c_name,FALSE, 1);
				$imginfo = $this->adjust_img($data['upload_data']['full_path'],SQUARE,$file_path.$file_z_name,FALSE, 1);
			}
			else
			{
				$imginfo = $data['upload_data']['full_path'];
			}

            if ( empty($imginfo) )
            {
				return array('code'=>9004,'cid'=>$filename,'message'=>'图片处理异常');
            }
            else
            {
				$ret['fullpath'] = $data['upload_data']['full_path'];
				$ret['code'] = 0;
				$ret['width'] = (isset($imginfo['width']) && is_numeric($imginfo['width'])) ? $imginfo['width'] : 0;
				$ret['height'] = (isset($imginfo['height']) && is_numeric($imginfo['height']))  ? $imginfo['height'] : 0;				
				return $ret;
            }
        }
	}

	protected function send($content)
	{
		header("Content-type: image/jpeg");
		echo $content;
		exit;
	}

	protected function cache_show($dir, $filename )
	{
		$firstFolder = substr($filename,0,1);
		$secondFolder = substr($filename,1,2);
		$lastFolder = substr($filename,3,2);
		$path = $dir . $firstFolder . '/' . $secondFolder . '/' . $lastFolder. '/' . $filename;
		if ( file_exists($path) )
		{
			$this->cache_send($path);
		}
	}

	protected function cache_send($file)
	{
		$timestamp = filemtime($file);
		$gmt_mtime=gmdate('r', $timestamp);
		header('ETag: "'.md5($timestamp.$file).'"');
		if(isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])||isset($_SERVER['HTTP_IF_NONE_MATCH']))
		{
			if ($_SERVER['HTTP_IF_MODIFIED_SINCE']==$gmt_mtime||str_replace('"','',stripslashes($_SERVER['HTTP_IF_NONE_MATCH']))==md5($timestamp.$file))
			{
				header('HTTP/1.1 304 Not Modified');
				exit();
			}
		}
		header('Last-Modified: '.$gmt_mtime);
		header('Cache-Control: public');
		header("Content-type: image/jpeg");
		echo file_get_contents($file);
		exit;
	}

}